split_status  <- initial_split(covid_status,
prop = 0.7,
strata = "COVID")
train_s  <- training(split_status)
test_s   <- testing(split_status)
View(covid_status)
covid_status$urine_leukocytes <- NULL
# specify admission as an outcome column
dna_s <- recipe(COVID ~ ., data = covid_status) %>%
step_nzv(all_predictors())  %>%
step_bagimpute(all_numeric()) %>%
step_integer(matches("urine_color|urine_aspect|urine_hemoglobin")) %>%
step_center(all_numeric(), -all_outcomes()) %>%
step_scale(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), one_hot = TRUE)
mrna_s <- prep(dna_s, training = train_s)
# pro = processed, resulting in "pro-train", like protein, get it?
protrain_s <- bake(mrna_s, new_data = train_s)
protest_s <- bake(mrna_s, new_data = test_s)
View(test_s)
View(protrain_s)
pca <- prcomp(protrain_s)
View(protrain_s)
View(protest_s)
View(protrain_s)
# Selecting non numeric columns into a df, looking for features which may have ordinality
train_s_nominal <- protrain_s %>% dplyr::select_if(~!is.numeric(.x))
train_s_numeric <- protrain_s %>% dplyr::select_if(is.numeric(.x))
train_s_numeric <- protrain_s %>% dplyr::select_if(~is.numeric(.x))
View(train_s_numeric)
View(covid_status)
# Selecting non numeric columns into a df, looking for features which may have ordinality
rm(train_s_nominal,train_s_numeric)
# specify admission as an outcome column
dna_s <- recipe(COVID ~ ., data = covid_status) %>%
step_nzv(all_predictors())  %>%
step_bagimpute(all_numeric()) %>%
step_integer(matches("urine_color|urine_aspect|urine_hemoglobin")) %>%
step_center(all_numeric(), -all_outcomes()) %>%
step_scale(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), one_hot = TRUE)
mrna_s <- prep(dna_s, training = train_s)
# pro = processed, resulting in "pro-train", like protein, get it?
protrain_s <- bake(mrna_s, new_data = train_s)
protest_s <- bake(mrna_s, new_data = test_s)
View(protrain_s)
View(covid_status)
View(train_s)
View(protest_s)
View(protrain_s)
# specify admission as an outcome column
dna_s <- recipe(COVID ~ ., data = covid_status) %>%
step_nzv(all_predictors())  %>%
step_bagimpute(all_predictors()) %>%
step_integer(matches("urine_color|urine_aspect|urine_hemoglobin")) %>%
step_center(all_numeric(), -all_outcomes()) %>%
step_scale(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), one_hot = TRUE)
mrna_s <- prep(dna_s, training = train_s)
# pro = processed, resulting in "pro-train", like protein, get it?
protrain_s <- bake(mrna_s, new_data = train_s)
protest_s <- bake(mrna_s, new_data = test_s)
View(protest_s)
pca <- prcomp(protrain_s)
summary(pca)
View(pca)
eig <- pca$sdev %>%
as.vector() %>%
.^2
# Sum of all eigenvalues equals number of variables
sum(eig)
# Find PCs where the sum of eigenvalues is greater than or equal to 1
which(eig >= 1)
#compute standard deviation of each principal component
std_dev <- pca$sdev
#compute variance
pr_var <- std_dev^2
#proportion of variance explained
prop_varex <- pr_var/sum(pr_var)
#scree plot
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
#proportion of variance explained
prop_varex_2 <- eig/sum(eig)
View(protrain_s)
ggbiplot(pca,
ellipse = TRUE,
#choices=c(2,3),
labels=protrain_s$admission,
groups=protrain_s$COVID_X1)
View(pca)
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
#scree plot
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
summary.pca
summary.summary.prcomp
summary.prcomp
rbind(
SD = sqrt(eig),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig))
SD = sqrt(eig),
SD = sqrt(eig),
plot_pca <- rbind(
SD = sqrt(eig),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig))
plot_pca <- data.frame(
SD = sqrt(eig),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig))
View(plot_pca)
SD = sqrt(eig),
plot_pca <- data.frame(SD = sqrt(eig),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig)) %>%
tidyr::gather(metric, Proportion, -SD) %>%
ggplot(aes(SD, Proportion)) +
geom_point() +
facet_wrap(~ metric, ncol = 1, scales = "free")
plot(plot_pca)
View(pca)
plot_pca <- data.frame(PC = pca$sdev %>% seq_along(),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig)) %>%
tidyr::gather(metric, Proportion, -SD) %>%
ggplot(aes(SD, Proportion)) +
geom_point() +
facet_wrap(~ metric, ncol = 1, scales = "free")
plot_pca <- data.frame(PC = pca$sdev %>% seq_along(),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig)) %>%
tidyr::gather(metric, Proportion, -PC) %>%
ggplot(aes(PC, Proportion)) +
geom_point() +
facet_wrap(~ metric, ncol = 1, scales = "free")
plot(plot_pca)
plot_pca <- data.frame(PC = pca$sdev %>% seq_along(),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig)) %>%
tidyr::gather(metric, Proportion, -PC) #%>%
View(plot_pca)
plot_pca <- data.frame(PC = pca$sdev %>% seq_along(),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig)) %>%
tidyr::gather(metric, Proportion, -PC) %>%
ggplot(aes(PC, Proportion)) +
geom_point() +
facet_wrap(~ metric, ncol = 1, scales = "free")
plot(plot_pca)
View(pca)
train_pca <- data.frame(covid = protrain_s$COVID_X1, pca$x)
View(train_pca)
# limit to only the first 17 PC's (per eigenvalue criterion)
train_pca <- train_pca[,1:17]
# limit to only the first 17 PC's (per eigenvalue criterion)
train_pca <- train_pca[,1:18]
train_pca <- data.frame(covid = protrain_s$COVID_X1, pca$x)
# limit to only the first 17 PC's (per eigenvalue criterion)
train_pca <- train_pca[,1:18]
#transform test into PCA
test_pca <- predict(pca, newdata = protest_s)
test_pca <- as.data.frame(test_pca)
View(test_pca)
test_pca <- data.frame(covid = protrain_s$COVID_X1,pca_test$x)
test_pca <- data.frame(covid = protrain_s$COVID_X1, pca_test)
test_pca <- as.data.frame(covid = protrain_s$COVID_X1, test_pca)
View(test_pca)
#transform preprocessed test dataframe into PCA
test_pca <- predict(pca, newdata = protest_s)
test_pca <- as.data.frame(covid = protrain_s$COVID_X1, test_pca)
View(test_pca)
test_pca <- as.data.frame(covid = protest_s$COVID_X1, test_pca)
View(test_pca)
View(test_pca)
#data <- read_csv("UNCOVER/einstein/diagnosis-of-covid-19-and-its-clinical-spectrum.csv")
data <- read_csv("diagnosis-of-covid-19-and-its-clinical-spectrum.csv") %>%
dplyr::rename(COVID = sars_cov_2_exam_result,
floor = patient_addmited_to_regular_ward_1_yes_0_no,
step = patient_addmited_to_semi_intensive_unit_1_yes_0_no,
icu = patient_addmited_to_intensive_care_unit_1_yes_0_no)
library(ggbiplot) # masks mutate, rename, summarise, arrange
pca <- prcomp(protrain_s)
# Select admitted patients only
covid_status <- data %>%
filter(floor == "TRUE" | step == "TRUE" | icu == "TRUE")
#recode admission and COVID status columns
covid_status$admission <- base::ifelse(covid_status$floor == "TRUE", "1",
base::ifelse(covid_status$step == "TRUE", "2",
base::ifelse(covid_status$icu == "TRUE", "2", "0"))) %>% base::as.numeric()
covid_status$COVID <- base::ifelse(covid_status$COVID == "positive", "1","0")
# remove the old floor/step/icu columns, then reorder the columns to put covid target first
covid_status <- covid_status %>%
dplyr::select(-floor,
-step,
-icu,
-patient_id) %>%
dplyr::select(COVID,
everything())
# Subset into covid stratified training and testing sets
set.seed(333)
split_status  <- initial_split(covid_status,
prop = 0.7,
strata = "COVID")
train_s  <- training(split_status)
test_s   <- testing(split_status)
# Double check why Urine Leuko is causing issues
covid_status$urine_leukocytes <- NULL
# specify admission as an outcome column
dna_s <- recipe(COVID ~ ., data = covid_status) %>%
step_nzv(all_predictors())  %>%
step_bagimpute(all_predictors()) %>%
step_integer(matches("urine_color|urine_aspect|urine_hemoglobin")) %>%
step_center(all_numeric(), -all_outcomes()) %>%
step_scale(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), one_hot = TRUE)
mrna_s <- prep(dna_s, training = train_s)
# pro = processed, resulting in "pro-train", like protein, get it?
protrain_s <- bake(mrna_s, new_data = train_s)
protest_s <- bake(mrna_s, new_data = test_s)
library(ggbiplot) # masks mutate, rename, summarise, arrange
pca <- prcomp(protrain_s)
summary(pca)
# need to rework labels here
ggbiplot(pca,
ellipse = TRUE,
#choices=c(2,3),
labels=protrain_s$admission,
groups=protrain_s$COVID_X1)
# Compute eigenvalues
eig <- pca$sdev %>%
as.vector() %>%
.^2
# Sum of all eigenvalues equals number of variables
#sum(eig)
## [1] 42
# Find PCs where the sum of eigenvalues is greater than or equal to 1
which(eig >= 1)
plot_pca <- data.frame(PC = pca$sdev %>% seq_along(),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig)) %>%
tidyr::gather(metric, Proportion, -PC) %>%
ggplot(aes(PC, Proportion)) +
geom_point() +
facet_wrap(~ metric, ncol = 1, scales = "free")
plot(plot_pca)
train_pca <- data.frame(covid = protrain_s$COVID_X1, pca$x)
View(train_pca)
#transform preprocessed test dataframe into PCA
test_pca <- predict(pca, newdata = protest_s)
View(train_pca)
# limit to only the first 16 PC's (per eigenvalue criterion)
train_pca <- train_pca[,1:17]
test_pca <- test_pca[1:17]
#transform preprocessed test dataframe into PCA
test_pca <- predict(pca, newdata = protest_s)
View(train_pca)
# limit to only the first 16 PC's (per eigenvalue criterion)
train_pca <- train_pca[,1:17]
test_pca <- test_pca[,1:17]
View(test_pca)
View(test_pca)
#transform preprocessed test dataframe into PCA
test_pca <- predict(pca, newdata = protest_s)
View(test_pca)
train_pca <- data.frame(covid = protrain_s$COVID_X1, pca$x)
#transform preprocessed test dataframe into PCA
test_pca <- predict(pca, newdata = protest_s)
#data <- read_csv("UNCOVER/einstein/diagnosis-of-covid-19-and-its-clinical-spectrum.csv")
data <- read_csv("diagnosis-of-covid-19-and-its-clinical-spectrum.csv") %>%
dplyr::rename(COVID = sars_cov_2_exam_result,
floor = patient_addmited_to_regular_ward_1_yes_0_no,
step = patient_addmited_to_semi_intensive_unit_1_yes_0_no,
icu = patient_addmited_to_intensive_care_unit_1_yes_0_no)
data$urine_ph <- as.numeric(data$urine_ph)
# Select admitted patients only
covid_status <- data %>%
filter(floor == "TRUE" | step == "TRUE" | icu == "TRUE")
#recode admission and COVID status columns
covid_status$admission <- base::ifelse(covid_status$floor == "TRUE", "1",
base::ifelse(covid_status$step == "TRUE", "2",
base::ifelse(covid_status$icu == "TRUE", "2", "0"))) %>% base::as.numeric()
covid_status$COVID <- base::ifelse(covid_status$COVID == "positive", "1","0")
# remove the old floor/step/icu columns, then reorder the columns to put covid target first
covid_status <- covid_status %>%
dplyr::select(-floor,
-step,
-icu,
-patient_id) %>%
dplyr::select(COVID,
everything())
# Subset into covid stratified training and testing sets
set.seed(333)
split_status  <- initial_split(covid_status,
prop = 0.7,
strata = "COVID")
train_s  <- training(split_status)
test_s   <- testing(split_status)
# Double check why Urine Leuko is causing issues
covid_status$urine_leukocytes <- NULL
# specify admission as an outcome column
dna_s <- recipe(COVID ~ ., data = covid_status) %>%
step_nzv(all_predictors())  %>%
step_bagimpute(all_predictors()) %>%
step_integer(matches("urine_color|urine_aspect|urine_hemoglobin")) %>%
step_center(all_numeric(), -all_outcomes()) %>%
step_scale(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), one_hot = TRUE)
mrna_s <- prep(dna_s, training = train_s)
# pro = processed, resulting in "pro-train", like protein, get it?
protrain_s <- bake(mrna_s, new_data = train_s)
protest_s <- bake(mrna_s, new_data = test_s)
library(ggbiplot) # masks mutate, rename, summarise, arrange
pca <- prcomp(protrain_s)
summary(pca)
# need to rework labels here
ggbiplot(pca,
ellipse = TRUE,
#choices=c(2,3),
labels=protrain_s$admission,
groups=protrain_s$COVID_X1)
# Compute eigenvalues
eig <- pca$sdev %>%
as.vector() %>%
.^2
# Sum of all eigenvalues equals number of variables
#sum(eig)
## [1] 42
# Find PCs where the sum of eigenvalues is greater than or equal to 1
which(eig >= 1)
set.seed(333)
pca <- prcomp(protrain_s)
summary(pca)
# Compute eigenvalues
eig <- pca$sdev %>%
as.vector() %>%
.^2
# Sum of all eigenvalues equals number of variables
#sum(eig)
## [1] 42
# Find PCs where the sum of eigenvalues is greater than or equal to 1
which(eig >= 1)
plot_pca <- data.frame(PC = pca$sdev %>% seq_along(),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig)) %>%
tidyr::gather(metric, Proportion, -PC) %>%
ggplot(aes(PC, Proportion)) +
geom_point() +
facet_wrap(~ metric, ncol = 1, scales = "free")
plot(plot_pca)
train_pca <- data.frame(covid = protrain_s$COVID_X1, pca$x)
#transform preprocessed test dataframe into PCA
test_pca <- predict(pca, newdata = protest_s)
View(train_pca)
# limit to only the first 16 PC's (per eigenvalue criterion)
train_pca_final <- train_pca[,1:17]
test_pca_final <- test_pca[,1:17]
#transform preprocessed test dataframe into PCA
test_pca <- predict(pca, newdata = protest_s)
test_pca <- as.data.frame(test_pca)
View(test_pca)
#data <- read_csv("UNCOVER/einstein/diagnosis-of-covid-19-and-its-clinical-spectrum.csv")
data <- read_csv("diagnosis-of-covid-19-and-its-clinical-spectrum.csv") %>%
dplyr::rename(COVID = sars_cov_2_exam_result,
floor = patient_addmited_to_regular_ward_1_yes_0_no,
step = patient_addmited_to_semi_intensive_unit_1_yes_0_no,
icu = patient_addmited_to_intensive_care_unit_1_yes_0_no)
# Select admitted patients only
covid_status <- data %>%
filter(floor == "TRUE" | step == "TRUE" | icu == "TRUE")
#recode admission and COVID status columns
covid_status$admission <- base::ifelse(covid_status$floor == "TRUE", "1",
base::ifelse(covid_status$step == "TRUE", "2",
base::ifelse(covid_status$icu == "TRUE", "2", "0"))) %>% base::as.numeric()
covid_status$COVID <- base::ifelse(covid_status$COVID == "positive", "1","0")
# remove the old floor/step/icu columns, then reorder the columns to put covid target first
covid_status <- covid_status %>%
dplyr::select(-floor,
-step,
-icu,
-patient_id) %>%
dplyr::select(COVID,
everything())
# Subset into covid stratified training and testing sets
set.seed(333)
split_status  <- initial_split(covid_status,
prop = 0.7,
strata = "COVID")
train_s  <- training(split_status)
test_s   <- testing(split_status)
# Double check why Urine Leuko is causing issues
covid_status$urine_leukocytes <- NULL
# specify admission as an outcome column
dna_s <- recipe(COVID ~ ., data = covid_status) %>%
step_nzv(all_predictors())  %>%
step_bagimpute(all_predictors()) %>%
step_integer(matches("urine_color|urine_aspect|urine_hemoglobin")) %>%
step_center(all_numeric(), -all_outcomes()) %>%
step_scale(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), one_hot = TRUE)
mrna_s <- prep(dna_s, training = train_s)
# pro = processed, resulting in "pro-train", like protein, get it?
protrain_s <- bake(mrna_s, new_data = train_s)
protest_s <- bake(mrna_s, new_data = test_s)
library(ggbiplot) # masks mutate, rename, summarise, arrange
set.seed(333)
pca <- prcomp(protrain_s)
summary(pca)
# Compute eigenvalues
eig <- pca$sdev %>%
as.vector() %>%
.^2
# Sum of all eigenvalues equals number of variables
#sum(eig)
## [1] 42
# Find PCs where the sum of eigenvalues is greater than or equal to 1
which(eig >= 1)
plot_pca <- data.frame(PC = pca$sdev %>% seq_along(),
Proportion = eig/sum(eig),
Cumulative = cumsum(eig)/sum(eig)) %>%
tidyr::gather(metric, Proportion, -PC) %>%
ggplot(aes(PC, Proportion)) +
geom_point() +
facet_wrap(~ metric, ncol = 1, scales = "free")
plot(plot_pca)
train_pca <- data.frame(covid = protrain_s$COVID_X1, pca$x)
#transform preprocessed test dataframe into PCA
test_pca <- predict(pca, newdata = protest_s)
test_pca <- as.data.frame(test_pca)
View(test_pca)
test_pca <- data.frame(covid = protest_s$COVID_X1, test_pca)
View(test_pca)
# limit to only the first 16 PC's (per eigenvalue criterion)
train_pca_final <- train_pca[,1:17]
test_pca_final <- test_pca[,1:17]
View(train_pca_final)
View(test_pca_final)
# create xgb matrix
X_train_pca <- as.matrix(train_pca_final[setdiff(names(train_pca_final), "covid")])
View(X_train_pca)
Y_train_pca <- train_pca_final$covid
X_test_pca <- as.matrix(test_pca_final[setdiff(names(test_pca_final), "covid")])
Y_test_pca <- test_pca_final$admission
xgb_grid_pca = expand.grid(
nrounds = 1000,
eta = c(0.1), #0.05, 0.01), # limited for processing brevity
max_depth = c(2, 3, 4, 5, 6, 7, 8),
gamma = 0,
colsample_bytree=1,
min_child_weight=c(1, 2, 3, 4 ,5),
subsample=1)
control_pca <- trainControl(method ="cv",
number = 10)
set.seed(333)
xgb_caret_pca <- train(x=X_train_pca,
y=Y_train_pca,
method ='xgbTree',
metric ="Accuracy",
#nthreads = 6,
trControl = control_pca,
tuneGrid = xgb_grid_pca
)
xgb_caret_pca <- train(x=X_train_pca,
y=as.factor(Y_train_pca),
method ='xgbTree',
metric ="Accuracy",
#nthreads = 6,
trControl = control_pca,
tuneGrid = xgb_grid_pca
)
# Best tune parameters from hyper parameter grid search
#xgb_caret$results
xgb_caret_pca$bestTune
ggplot(xgb_caret_pca) + theme_minimal()
Y_test_pca <- test_pca_final$covid
# prediction on the test set, with no parameters to add or adjust I'm just using the best tune selected parameters:
test_pred_pca <- predict(xgb_caret_pca, X_test)
# prediction on the test set, with no parameters to add or adjust I'm just using the best tune selected parameters:
test_pred_pca <- predict(xgb_caret_pca, X_test_pca)
caret::confusionMatrix(test_pred_pca, as.factor(Y_test_pca))
# Best tune parameters from hyper parameter grid search
xgb_caret_pca$results
xgb_caret_pca <- train(x=X_train_pca,
y=as.factor(Y_train_pca),
method ='xgbTree',
metric ="Accuracy",
nthreads = 6,
trControl = control_pca,
tuneGrid = xgb_grid_pca
)
xgb_caret_pca <- train(x=X_train_pca,
y=as.factor(Y_train_pca),
method ='xgbTree',
metric ="Accuracy",
nthreads = 6,
trControl = control_pca,
tuneGrid = xgb_grid_pca
)
xgb_caret_pca <- train(x=X_train_pca,
y=as.factor(Y_train_pca),
method ='xgbTree',
metric ="Accuracy",
objective = "binary:logistic",
nthreads = 6,
trControl = control_pca,
tuneGrid = xgb_grid_pca
)
